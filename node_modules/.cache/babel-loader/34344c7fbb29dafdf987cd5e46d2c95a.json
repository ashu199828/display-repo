{"ast":null,"code":"import _slicedToArray from\"D:/React/repo-improv-main/repo-improv-main/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from\"react\";import TokenContext from\"./TokenContext\";import{getAuth,signInWithPopup,GithubAuthProvider}from\"firebase/auth\";import{initializeApp}from\"firebase/app\";import{useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";var TokenState=function TokenState(props){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),tokenValue=_useState2[0],setTokenValue=_useState2[1];var firebaseConfig={apiKey:\"AIzaSyDPWWVqKEJ6w3ZETTm9qB2BVY0stqOO4NA\",authDomain:\"oauth-app-3e936.firebaseapp.com\",projectId:\"oauth-app-3e936\",storageBucket:\"oauth-app-3e936.appspot.com\",messagingSenderId:\"855299737848\",appId:\"1:855299737848:web:c40491641c94fea476d30d\",measurementId:\"G-TLJR6WTSJP\"};// Initialize Firebase\nvar app=initializeApp(firebaseConfig);var signInAuth=function signInAuth(provider){var auth=getAuth(app);signInWithPopup(auth,provider).then(function(result){var _result$user,_result$user$reloadUs;// This gives you a GitHub Access Token. You can use it to access the GitHub API.\nvar credential=GithubAuthProvider.credentialFromResult(result);var token=credential.accessToken;// console.log(token)\nsetTokenValue(token);localStorage.setItem(\"token\",token);// The signed-in user info.\nvar user=result===null||result===void 0?void 0:(_result$user=result.user)===null||_result$user===void 0?void 0:(_result$user$reloadUs=_result$user.reloadUserInfo)===null||_result$user$reloadUs===void 0?void 0:_result$user$reloadUs.screenName;console.log(user);localStorage.setItem(\"user\",user);if(user){window.location='/home';}else{window.location=\"/\";}// ...\n}).catch(function(error){window.location=\"/\";});};return/*#__PURE__*/_jsx(TokenContext.Provider,{value:{tokenValue:tokenValue,signInAuth:signInAuth},children:props.children});};export default TokenState;","map":{"version":3,"sources":["D:/React/repo-improv-main/repo-improv-main/src/context/Token/TokenState.js"],"names":["React","TokenContext","getAuth","signInWithPopup","GithubAuthProvider","initializeApp","useState","TokenState","props","tokenValue","setTokenValue","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","signInAuth","provider","auth","then","result","credential","credentialFromResult","token","accessToken","localStorage","setItem","user","reloadUserInfo","screenName","console","log","window","location","catch","error","children"],"mappings":"6HAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,OAASC,OAAT,CAAkBC,eAAlB,CAAmCC,kBAAnC,KAA6D,eAA7D,CACA,OAASC,aAAT,KAA8B,cAA9B,CACA,OAASC,QAAT,KAAyB,OAAzB,C,2CAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,CAE1B,cAAoCF,QAAQ,CAAC,EAAD,CAA5C,wCAAOG,UAAP,eAAmBC,aAAnB,eAEA,GAAMC,CAAAA,cAAc,CAAG,CACnBC,MAAM,CAAE,yCADW,CAEnBC,UAAU,CAAE,iCAFO,CAGnBC,SAAS,CAAE,iBAHQ,CAInBC,aAAa,CAAE,6BAJI,CAKnBC,iBAAiB,CAAE,cALA,CAMnBC,KAAK,CAAE,2CANY,CAOnBC,aAAa,CAAE,cAPI,CAAvB,CAUA;AACA,GAAMC,CAAAA,GAAG,CAAGd,aAAa,CAACM,cAAD,CAAzB,CAEA,GAAMS,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,QAAD,CAAc,CAC7B,GAAMC,CAAAA,IAAI,CAAGpB,OAAO,CAACiB,GAAD,CAApB,CACAhB,eAAe,CAACmB,IAAD,CAAOD,QAAP,CAAf,CACKE,IADL,CACU,SAACC,MAAD,CAAY,wCAEd;AACA,GAAMC,CAAAA,UAAU,CAAGrB,kBAAkB,CAACsB,oBAAnB,CAAwCF,MAAxC,CAAnB,CACA,GAAMG,CAAAA,KAAK,CAAGF,UAAU,CAACG,WAAzB,CAEA;AAEAlB,aAAa,CAACiB,KAAD,CAAb,CACAE,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8BH,KAA9B,EAEA;AACA,GAAMI,CAAAA,IAAI,CAAGP,MAAH,SAAGA,MAAH,+BAAGA,MAAM,CAAEO,IAAX,8DAAG,aAAcC,cAAjB,gDAAG,sBAA8BC,UAA3C,CAEAC,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAEAF,YAAY,CAACC,OAAb,CAAqB,MAArB,CAA6BC,IAA7B,EAEA,GAAIA,IAAJ,CAAU,CACNK,MAAM,CAACC,QAAP,CAAkB,OAAlB,CACH,CAFD,IAEO,CACHD,MAAM,CAACC,QAAP,CAAkB,GAAlB,CACH,CACD;AACH,CAzBL,EAyBOC,KAzBP,CAyBa,SAACC,KAAD,CAAW,CAChBH,MAAM,CAACC,QAAP,CAAkB,GAAlB,CACH,CA3BL,EA4BH,CA9BD,CAiCA,mBACI,KAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,CAAE,CAAE5B,UAAU,CAAVA,UAAF,CAAcW,UAAU,CAAVA,UAAd,CAA9B,UACKZ,KAAK,CAACgC,QADX,EADJ,CAKH,CAvDD,CAyDA,cAAejC,CAAAA,UAAf","sourcesContent":["import React from \"react\";\nimport TokenContext from \"./TokenContext\";\nimport { getAuth, signInWithPopup, GithubAuthProvider } from \"firebase/auth\";\nimport { initializeApp } from \"firebase/app\";\nimport { useState } from \"react\";\n\nconst TokenState = (props) => {\n\n    const [tokenValue, setTokenValue] = useState(\"\")\n\n    const firebaseConfig = {\n        apiKey: \"AIzaSyDPWWVqKEJ6w3ZETTm9qB2BVY0stqOO4NA\",\n        authDomain: \"oauth-app-3e936.firebaseapp.com\",\n        projectId: \"oauth-app-3e936\",\n        storageBucket: \"oauth-app-3e936.appspot.com\",\n        messagingSenderId: \"855299737848\",\n        appId: \"1:855299737848:web:c40491641c94fea476d30d\",\n        measurementId: \"G-TLJR6WTSJP\"\n    };\n\n    // Initialize Firebase\n    const app = initializeApp(firebaseConfig);\n\n    const signInAuth = (provider) => {\n        const auth = getAuth(app);\n        signInWithPopup(auth, provider)\n            .then((result) => {\n\n                // This gives you a GitHub Access Token. You can use it to access the GitHub API.\n                const credential = GithubAuthProvider.credentialFromResult(result);\n                const token = credential.accessToken;\n\n                // console.log(token)\n\n                setTokenValue(token);\n                localStorage.setItem(\"token\", token);\n\n                // The signed-in user info.\n                const user = result?.user?.reloadUserInfo?.screenName;\n                \n                console.log(user)\n\n                localStorage.setItem(\"user\", user);\n\n                if (user) {\n                    window.location = '/home'\n                } else {\n                    window.location = \"/\";\n                }\n                // ...\n            }).catch((error) => {\n                window.location = \"/\";\n            });\n    }\n\n\n    return (\n        <TokenContext.Provider value={{ tokenValue, signInAuth }}>\n            {props.children}\n        </TokenContext.Provider>\n    )\n}\n\nexport default TokenState"]},"metadata":{},"sourceType":"module"}